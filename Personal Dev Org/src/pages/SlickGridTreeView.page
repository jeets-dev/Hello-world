<apex:page standardController="Quote" extensions="QuoteHandler_c" >

<head>  
  <title>SlickGrid example 5: Collapsing</title>
  <apex:stylesheet value="{!URLFOR($Resource.Slickgrid, '/slick.grid.css')}"/>
  <apex:stylesheet value="{!URLFOR($Resource.Slickgrid, '/css/smoothness/jquery-ui-1.8.16.custom.css')}"/>
  <apex:stylesheet value="{!URLFOR($Resource.Slickgrid, '/examples.css')}"/>
<!--
  <link rel="stylesheet" href="../slick.grid.css" type="text/css"/>
  <link rel="stylesheet" href="../css/smoothness/jquery-ui-1.8.16.custom.css" type="text/css"/>
  <link rel="stylesheet" href="examples.css" type="text/css"/> -->
  <style>
    .cell-title {
      font-weight: bold;
    }
    .cell-effort-driven {
      text-align: center;
    }
    .toggle {
      height: 9px;
      width: 9px;
      display: inline-block;
    }
    .toggle.expand {
      background: <apex:image url="{!URLFOR($Resource.Slickgrid,'/images/expand.gif')}" />;
    }
    .toggle.collapse {
      background: <apex:image url="{!URLFOR($Resource.Slickgrid,'/images/collapse.gif')}" />;
    }
  </style>
</head>

<table width="100%">
  <tr>
    <td valign="top" width="50%">
      <div style="border:1px solid gray;background:wheat;padding:6px;">
        <label>Show tasks of Quote {!quote.id} with % at least: </label>

        <div style="padding:4px;">
          <div style="width:100px;" id="pcSlider"></div>
        </div>
        <br/>
        <label>And title including:</label>
        <input type="text" id="txtSearch"/>
      </div>
      <br/>

      <div id="myGrid" style="width:600px;height:500px;"></div>
    </td>
    
  </tr>
</table>



<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/lib/jquery-1.7.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/lib/jquery-ui-1.8.16.custom.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/lib/jquery.event.drag-2.2.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/slick.core.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/slick.formatters.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/slick.editors.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/slick.grid.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.Slickgrid, '/slick.dataview.js')}"/>

<!--
<script src="../lib/firebugx.js"></script>
<script src="../lib/jquery-1.7.min.js"></script>
<script src="../lib/jquery-ui-1.8.16.custom.min.js"></script>
<script src="../lib/jquery.event.drag-2.2.js"></script>
<script src="../slick.core.js"></script>
<script src="../slick.formatters.js"></script>
<script src="../slick.editors.js"></script>
<script src="../slick.grid.js"></script>
<script src="../slick.dataview.js"></script>  -->

<script>
function requiredFieldValidator(value) {
  if (value == null || value == undefined || !value.length) {
    return {valid: false, msg: "This is a required field"};
  } else {
    return {valid: true, msg: null};
  }
}
var TaskNameFormatter = function (row, cell, value, columnDef, dataContext) {
  
  value = value.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
  var spacer = "<span style='display:inline-block;height:1px;width:" + (15 * dataContext["indent"]) + "px'></span>";
  var idx = dataView.getIdxById(dataContext.id);
  if (data[idx + 1] && data[idx + 1].indent > data[idx].indent) {
    if (dataContext._collapsed) {
      return spacer + " <span class='toggle expand'></span>&nbsp;" + value;
    } else {
      return spacer + " <span class='toggle collapse'></span>&nbsp;" + value;
    }
  } else {
    return spacer + " <span class='toggle'></span>&nbsp;" + value;
  }
};
var dataView;
var grid;
var data = [];
var columns = [
  {id: "title", name: "Title", field: "title", width: 220, cssClass: "cell-title", formatter: TaskNameFormatter, editor: Slick.Editors.Text, validator: requiredFieldValidator},
  {id: "duration", name: "Duration", field: "duration", editor: Slick.Editors.Text},
  {id: "indent", name: "indent", field: "indent", editor: Slick.Editors.Text},
  {id: "%", name: "% Complete", field: "percentComplete", width: 80, resizable: false, formatter: Slick.Formatters.PercentCompleteBar, editor: Slick.Editors.PercentComplete},
  {id: "start", name: "Start", field: "start", minWidth: 60, editor: Slick.Editors.Date},
  {id: "finish", name: "Finish", field: "finish", minWidth: 60, editor: Slick.Editors.Date},
  {id: "effort-driven", name: "Effort Driven", width: 80, minWidth: 20, maxWidth: 80, cssClass: "cell-effort-driven", field: "effortDriven", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox, cannotTriggerInsert: true}
];
var options = {
  editable: true,
  enableAddRow: true,
  enableCellNavigation: true,
  asyncEditorLoading: false
};
var percentCompleteThreshold = 0;
var searchString = "";
function myFilter(item) {
  if (item["percentComplete"] < percentCompleteThreshold) {
    return false;
  }
  if (searchString != "" && item["title"].indexOf(searchString) == -1) {
    return false;
  }
  if (item.parent != null) {
    var parent = item.parent;
    while (parent) {
      if (parent._collapsed || (parent["percentComplete"] < percentCompleteThreshold) || (searchString != "" && parent["title"].indexOf(searchString) == -1)) {
        return false;
      }
      parent = parent.parent;
    }
  }
  return true;
}
function percentCompleteSort(a, b) {
  return a["percentComplete"] - b["percentComplete"];
}

function getParentandAdd(item, parentid){
    
}

function prepateData(){
    
    for(i=0; i< quoteItems.length; i++){
              var d = {};
              d["id"] = quoteItems[i].Id;
              
              d["indent"] =  quoteItems[i].Level__c;
              d["title"] =  quoteItems[i].Name;
              d["duration"] = "5 days";
              d["percentComplete"] = Math.round(Math.random() * 100);
              d["start"] = "01/01/2009";
              d["finish"] = "01/05/2009";
              d["effortDriven"] = (i % 5 == 0); 
             
              if(quoteItems[i].Parent_Item_ID__c){
                  console.log('...1...');
                for(j=0, len = data.length; j < len; j++){
                    if(data[j].id == quoteItems[i].Parent_Item_ID__c){
                        d["parent"] = data[j];
                        data.splice(j+1,0, d);
                        break;
                    }
                    }
                 
                 
              }else{
                  data[data.length] = d;
              }
              
              
              
              
          }   
 }

$(function () {
  
  Visualforce.remoting.Manager.invokeAction(
      '{!$RemoteAction.QuoteHandler_c.getQuoteItems}','{!quote.id}',
      function(result, event) {
          quoteItems = result;
          prepateData();
          // initialize the model
          dataView = new Slick.Data.DataView({ inlineFilters: true });
          dataView.beginUpdate();       
          dataView.setItems(data);
          dataView.setFilter(myFilter);
          dataView.endUpdate();
            // initialize the grid
          grid = new Slick.Grid("#myGrid", dataView, columns, options);
         
          grid.onClick.subscribe(function (e, args) {
            if ($(e.target).hasClass("toggle")) {
              var item = dataView.getItem(args.row);
              if (item) {
                if (!item._collapsed) {
                  item._collapsed = true;
                } else {
                  item._collapsed = false;
                }
        
                dataView.updateItem(item.id, item);
              }
              e.stopImmediatePropagation();
            }
          });
        
        
          // wire up model events to drive the grid
          dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
          });
        
          dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
          });
  
          var h_runfilters = null;
          // wire up the slider to apply the filter to the model
          $("#pcSlider").slider({
            "range": "min",
            "slide": function (event, ui) {
              Slick.GlobalEditorLock.cancelCurrentEdit();
              if (percentCompleteThreshold != ui.value) {
                window.clearTimeout(h_runfilters);
                h_runfilters = window.setTimeout(dataView.refresh, 10);
                percentCompleteThreshold = ui.value;
              }
            }
          });
          // wire up the search textbox to apply the filter to the model
          $("#txtSearch").keyup(function (e) {
            
            Slick.GlobalEditorLock.cancelCurrentEdit();
            // clear on Esc
            if (e.which == 27) {
              this.value = "";
            }
            searchString = this.value;
            dataView.refresh();
          })
         
         
      }
  );

})
</script>

</apex:page>